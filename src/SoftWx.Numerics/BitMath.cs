// Copyright ©2012-2016 SoftWx, Inc.
// Released under the MIT License the text of which appears at the end of this file.
// <authors> Steve Hatchett

// ReSharper disable InconsistentNaming

namespace SoftWx.Numerics
{
    /// <summary>
    ///     Numeric extension methods for bit fiddling operations on integer numeric types.
    /// </summary>
    /// <remarks>
    ///     Many of the bit fiddling methods are the result of benchmarking
    ///     various alternate algorithms presented on Sean Eron Anderson's page
    ///     http://graphics.stanford.edu/~seander/bithacks.html
    ///     sometimes with minor improvements for C#, and choosing compact
    ///     alternatives that perform well in C# for each data type.
    /// </remarks>
    public static class BitMath
    {
        /// <summary>Lookup table for bit position of most significant bit.</summary>
        // values generated by
        // msbPos256[0] = 255; // special value for when there are no set bits
        // msbPos256[1] = 0;
        // for (int i = 2; i< 256; i++) msbPos256[i] = (byte)(1 + msbPos256[i / 2]);
        internal static readonly byte[] msbPos256 =
        {
            255, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
            6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
            6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
            7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
            7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
            7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
            7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
        };

        internal static readonly byte[] lsbPos256 =
        {
            255, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
            5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
            6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
            5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
            7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
            5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
            6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
            5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0
        };

        // bit position lookup table where all bits zero after most significant bit
        internal static readonly byte[] DeBruijnMSBSet =
        {
            0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,
            31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9
        };

        /// <summary>Returns the least significant set bit of the specified value.</summary>
        /// <remarks>Example: LowBit(10) returns 2, i.e. low bit of 00001010 is 00000010.</remarks>
        /// <param name="value">The value whose least significant bit is desired.</param>
        /// <returns>The value parameter's the least significant bit.</returns>
        public static byte LowBit(this byte value)
        {
            return (byte) (value & -value);
        }

        /// <summary>Returns the least significant set bit of the specified value.</summary>
        /// <remarks>Example: LowBit(10) returns 2, i.e. low bit of 00001010 is 00000010.</remarks>
        /// <param name="value">The value whose least significant bit is desired.</param>
        /// <returns>The value parameter's the least significant bit.</returns>
        public static sbyte LowBit(this sbyte value)
        {
            return (sbyte) (value & -value);
        }

        /// <summary>Returns the least significant set bit of the specified value.</summary>
        /// <remarks>Example: LowBit(10) returns 2, i.e. low bit of 00001010 is 00000010.</remarks>
        /// <param name="value">The value whose least significant bit is desired.</param>
        /// <returns>The value parameter's the least significant bit.</returns>
        public static ushort LowBit(this ushort value)
        {
            return (ushort) (value & -value);
        }

        /// <summary>Returns the least significant set bit of the specified value.</summary>
        /// <remarks>Example: LowBit(10) returns 2, i.e. low bit of 00001010 is 00000010.</remarks>
        /// <param name="value">The value whose least significant bit is desired.</param>
        /// <returns>The value parameter's the least significant bit.</returns>
        public static short LowBit(this short value)
        {
            return (short) (value & -value);
        }

        /// <summary>Returns the least significant set bit of the specified value.</summary>
        /// <remarks>Example: LowBit(10) returns 2, i.e. low bit of 00001010 is 00000010.</remarks>
        /// <param name="value">The value whose least significant bit is desired.</param>
        /// <returns>The value parameter's the least significant bit.</returns>
        public static uint LowBit(this uint value)
        {
            return value & unchecked((uint) -value);
        }

        /// <summary>Returns the least significant set bit of the specified value.</summary>
        /// <remarks>Example: LowBit(10) returns 2, i.e. low bit of 00001010 is 00000010.</remarks>
        /// <param name="value">The value whose least significant bit is desired.</param>
        /// <returns>The value parameter's the least significant bit.</returns>
        public static int LowBit(this int value)
        {
            return value & unchecked(-value);
        }

        /// <summary>Returns the least significant set bit of the specified value.</summary>
        /// <remarks>Example: LowBit(10) returns 2, i.e. low bit of 00001010 is 00000010.</remarks>
        /// <param name="value">The value whose least significant bit is desired.</param>
        /// <returns>The value parameter's the least significant bit.</returns>
        public static ulong LowBit(this ulong value)
        {
            return value & unchecked((ulong) -(long) value);
        }

        /// <summary>Returns the least significant set bit of the specified value.</summary>
        /// <remarks>Example: LowBit(10) returns 2, i.e. low bit of 00001010 is 00000010.</remarks>
        /// <param name="value">The value whose least significant bit is desired.</param>
        /// <returns>The value parameter's the least significant bit.</returns>
        public static long LowBit(this long value)
        {
            return value & unchecked(-value);
        }

        /// <summary>Returns the least significant set bit of the specified value.</summary>
        /// <remarks>Example: LowBit(10) returns 2, i.e. low bit of 00001010 is 00000010.</remarks>
        /// <param name="value">The value whose least significant bit is desired.</param>
        /// <returns>The value parameter's the least significant bit.</returns>
        public static UInt128 LowBit(this UInt128 value)
        {
            return value.Low != 0 ? new UInt128(0, LowBit(value.Low)) : new UInt128(LowBit(value.High), 0);
        }

        /// <summary>Returns the most significant set bit of the specified value.</summary>
        /// <remarks>Example: HighBit(10) returns 8, i.e. high bit of 00001010 is 00001000.</remarks>
        /// <param name="value">The value whose most significant bit is desired.</param>
        /// <returns>The value parameter's the most significant bit.</returns>
        public static byte HighBit(this byte value)
        {
            return (byte) (1 << msbPos256[value]);
        }

        /// <summary>Returns the most significant set bit of the specified value.</summary>
        /// <remarks>Example: HighBit(10) returns 8, i.e. high bit of 00001010 is 00001000.</remarks>
        /// <param name="value">The value whose most significant bit is desired.</param>
        /// <returns>The value parameter's the most significant bit.</returns>
        public static sbyte HighBit(this sbyte value)
        {
            return
                (sbyte) (1 << msbPos256[(byte) value]); // the cast to byte is not redundant (avoids sign bit extension)
        }

        /// <summary>Returns the most significant set bit of the specified value.</summary>
        /// <remarks>Example: HighBit(10) returns 8, i.e. high bit of 00001010 is 00001000.</remarks>
        /// <param name="value">The value whose most significant bit is desired.</param>
        /// <returns>The value parameter's the most significant bit.</returns>
        public static ushort HighBit(this ushort value)
        {
            uint v = value;
            if (v == 0) return 0;
            v |= v >> 1;
            v |= v >> 2;
            v |= v >> 4;
            v |= v >> 8;
            return (ushort) ((v >> 1) + 1);
        }

        /// <summary>Returns the most significant set bit of the specified value.</summary>
        /// <remarks>Example: HighBit(10) returns 8, i.e. high bit of 00001010 is 00001000.</remarks>
        /// <param name="value">The value whose most significant bit is desired.</param>
        /// <returns>The value parameter's the most significant bit.</returns>
        public static short HighBit(this short value)
        {
            return (short) HighBit((ushort) value);
        }

        /// <summary>Returns the most significant set bit of the specified value.</summary>
        /// <remarks>Example: HighBit(10) returns 8, i.e. high bit of 00001010 is 00001000.</remarks>
        /// <param name="value">The value whose most significant bit is desired.</param>
        /// <returns>The value parameter's the most significant bit.</returns>
        public static uint HighBit(this uint value)
        {
            if (value == 0) return 0;
            value |= value >> 1;
            value |= value >> 2;
            value |= value >> 4;
            value |= value >> 8;
            value |= value >> 16;
            return (value >> 1) + 1;
        }

        /// <summary>Returns the most significant set bit of the specified value.</summary>
        /// <remarks>Example: HighBit(10) returns 8, i.e. high bit of 00001010 is 00001000.</remarks>
        /// <param name="value">The value whose most significant bit is desired.</param>
        /// <returns>The value parameter's the most significant bit.</returns>
        public static int HighBit(this int value)
        {
            return (int) HighBit((uint) value);
        }

        /// <summary>Returns the most significant set bit of the specified value.</summary>
        /// <remarks>Example: HighBit(10) returns 8, i.e. high bit of 00001010 is 00001000.</remarks>
        /// <param name="value">The value whose most significant bit is desired.</param>
        /// <returns>The value parameter's the most significant bit.</returns>
        public static ulong HighBit(this ulong value)
        {
            var high = (uint) (value >> 32);
            return high != 0 ? (ulong) HighBit(high) << 32 : HighBit((uint) value);
        }

        /// <summary>Returns the most significant set bit of the specified value.</summary>
        /// <remarks>Example: HighBit(10) returns 8, i.e. high bit of 00001010 is 00001000.</remarks>
        /// <param name="value">The value whose most significant bit is desired.</param>
        /// <returns>The value parameter's the most significant bit.</returns>
        public static long HighBit(this long value)
        {
            return (long) HighBit((ulong) value);
        }

        /// <summary>Returns the most significant set bit of the specified value.</summary>
        /// <remarks>Example: HighBit(10) returns 8, i.e. high bit of 00001010 is 00001000.</remarks>
        /// <param name="value">The value whose most significant bit is desired.</param>
        /// <returns>The value parameter's the most significant bit.</returns>
        public static UInt128 HighBit(this UInt128 value)
        {
            return value.High != 0 ? new UInt128(HighBit(value.High), 0UL) : new UInt128(0UL, HighBit(value.Low));
        }

        /// <summary>
        ///     Returns the least significant set bit position of the specified value,
        ///     or -1 if no bits were set. The least significant bit position is 0.
        /// </summary>
        /// <remarks>Example: LowBitPosition(10) returns 1, i.e. low bit of 00001010 is position 1.</remarks>
        /// <param name="value">The value whose least significant bit position is desired.</param>
        /// <returns>The value parameter's least significant bit position.</returns>
        public static int LowBitPosition(this byte value)
        {
            return (sbyte) lsbPos256[value];
        }

        /// <summary>
        ///     Returns the least significant set bit position of the specified value,
        ///     or -1 if no bits were set. The least significant bit position is 0.
        /// </summary>
        /// <remarks>Example: LowBitPosition(10) returns 1, i.e. low bit of 00001010 is position 1.</remarks>
        /// <param name="value">The value whose least significant bit position is desired.</param>
        /// <returns>The value parameter's least significant bit position.</returns>
        public static int LowBitPosition(this sbyte value)
        {
            return (sbyte) lsbPos256[(byte) value];
        }

        /// <summary>
        ///     Returns the least significant set bit position of the specified value,
        ///     or -1 if no bits were set. The least significant bit position is 0.
        /// </summary>
        /// <remarks>Example: LowBitPosition(10) returns 1, i.e. low bit of 00001010 is position 1.</remarks>
        /// <param name="value">The value whose least significant bit position is desired.</param>
        /// <returns>The value parameter's least significant bit position.</returns>
        public static int LowBitPosition(this ushort value)
        {
            var lowByte = (byte) value;
            if (lowByte != 0) return lsbPos256[lowByte];
            return value != 0 ? 8 + LowBitPosition((byte) (value >> 8)) : -1;
        }

        /// <summary>
        ///     Returns the least significant set bit position of the specified value,
        ///     or -1 if no bits were set. The least significant bit position is 0.
        /// </summary>
        /// <remarks>Example: LowBitPosition(10) returns 1, i.e. low bit of 00001010 is position 1.</remarks>
        /// <param name="value">The value whose least significant bit position is desired.</param>
        /// <returns>The value parameter's least significant bit position.</returns>
        public static int LowBitPosition(this short value)
        {
            return LowBitPosition((ushort) value);
        }

        /// <summary>
        ///     Returns the least significant set bit position of the specified value,
        ///     or -1 if no bits were set. The least significant bit position is 0.
        /// </summary>
        /// <remarks>Example: LowBitPosition(10) returns 1, i.e. low bit of 00001010 is position 1.</remarks>
        /// <param name="value">The value whose least significant bit position is desired.</param>
        /// <returns>The value parameter's least significant bit position.</returns>
        public static int LowBitPosition(this uint value)
        {
            var lowByte = (byte) value;
            if (lowByte != 0) return lsbPos256[lowByte];
            return value != 0 ? DeBruijnMSBSet[unchecked((value & (1u + ~value)) * 0x077cb531u) >> 27] : -1;
        }

        /// <summary>
        ///     Returns the least significant set bit position of the specified value,
        ///     or -1 if no bits were set. The least significant bit position is 0.
        /// </summary>
        /// <remarks>Example: LowBitPosition(10) returns 1, i.e. low bit of 00001010 is position 1.</remarks>
        /// <param name="value">The value whose least significant bit position is desired.</param>
        /// <returns>The value parameter's least significant bit position.</returns>
        public static int LowBitPosition(this int value)
        {
            return LowBitPosition((uint) value);
        }

        /// <summary>
        ///     Returns the least significant set bit position of the specified value,
        ///     or -1 if no bits were set. The least significant bit position is 0.
        /// </summary>
        /// <remarks>Example: LowBitPosition(10) returns 1, i.e. low bit of 00001010 is position 1.</remarks>
        /// <param name="value">The value whose least significant bit position is desired.</param>
        /// <returns>The value parameter's least significant bit position.</returns>
        public static int LowBitPosition(this ulong value)
        {
            var lowByte = (byte) value;
            if (lowByte != 0) return lsbPos256[lowByte];
            var low = (uint) value;
            if (low != 0) return DeBruijnMSBSet[unchecked((value & (1u + ~low)) * 0x077cb531u) >> 27];
            return value != 0 ? 32 + LowBitPosition((uint) (value >> 32)) : -1;
        }

        /// <summary>
        ///     Returns the least significant set bit position of the specified value,
        ///     or -1 if no bits were set. The least significant bit position is 0.
        /// </summary>
        /// <remarks>Example: LowBitPosition(10) returns 1, i.e. low bit of 00001010 is position 1.</remarks>
        /// <param name="value">The value whose least significant bit position is desired.</param>
        /// <returns>The value parameter's least significant bit position.</returns>
        public static int LowBitPosition(this long value)
        {
            return LowBitPosition((ulong) value);
        }

        /// <summary>
        ///     Returns the least significant set bit position of the specified value,
        ///     or -1 if no bits were set. The least significant bit position is 0.
        /// </summary>
        /// <remarks>Example: LowBitPosition(10) returns 1, i.e. low bit of 00001010 is position 1.</remarks>
        /// <param name="value">The value whose least significant bit position is desired.</param>
        /// <returns>The value parameter's least significant bit position.</returns>
        public static int LowBitPosition(this UInt128 value)
        {
            return value.Low != 0
                ? LowBitPosition(value.Low)
                : value != 0
                    ? 64 + LowBitPosition(value.High)
                    : -1;
        }

        /// <summary>
        ///     Returns the most significant set bit position of the specified value,
        ///     or -1 if no bits were set. The least significant bit position is 0.
        /// </summary>
        /// <remarks>Example: HighBitPosition(10) returns 3, i.e. high bit of 00001010 is position 3.</remarks>
        /// <param name="value">The value whose most significant bit position is desired.</param>
        /// <returns>The value parameter's most significant bit position.</returns>
        public static int HighBitPosition(this byte value)
        {
            return (sbyte) msbPos256[value];
        }

        /// <summary>
        ///     Returns the most significant set bit position of the specified value,
        ///     or -1 if no bits were set. The least significant bit position is 0.
        /// </summary>
        /// <remarks>Example: HighBitPosition(10) returns 3, i.e. high bit of 00001010 is position 3.</remarks>
        /// <param name="value">The value whose most significant bit position is desired.</param>
        /// <returns>The value parameter's most significant bit position.</returns>
        public static int HighBitPosition(this sbyte value)
        {
            return (sbyte) msbPos256[(byte) value]; // the cast to byte is not redundant (avoids sign bit extension)
        }

        /// <summary>
        ///     Returns the most significant set bit position of the specified value,
        ///     or -1 if no bits were set. The least significant bit position is 0.
        /// </summary>
        /// <remarks>Example: HighBitPosition(10) returns 3, i.e. high bit of 00001010 is position 3.</remarks>
        /// <param name="value">The value whose most significant bit position is desired.</param>
        /// <returns>The value parameter's most significant bit position.</returns>
        public static int HighBitPosition(this ushort value)
        {
            var hiByte = (byte) (value >> 8);
            if (hiByte != 0) return 8 + msbPos256[hiByte];
            return (sbyte) msbPos256[(byte) value];
        }

        /// <summary>
        ///     Returns the most significant set bit position of the specified value,
        ///     or -1 if no bits were set. The least significant bit position is 0.
        /// </summary>
        /// <remarks>Example: HighBitPosition(10) returns 3, i.e. high bit of 00001010 is position 3.</remarks>
        /// <param name="value">The value whose most significant bit position is desired.</param>
        /// <returns>The value parameter's most significant bit position.</returns>
        public static int HighBitPosition(this short value)
        {
            return HighBitPosition((ushort) value);
        }

        /// <summary>
        ///     Returns the most significant set bit position of the specified value,
        ///     or -1 if no bits were set. The least significant bit position is 0.
        /// </summary>
        /// <remarks>Example: HighBitPosition(10) returns 3, i.e. high bit of 00001010 is position 3.</remarks>
        /// <param name="value">The value whose most significant bit position is desired.</param>
        /// <returns>The value parameter's most significant bit position.</returns>
        public static int HighBitPosition(this uint value)
        {
            var hiByte = (byte) (value >> 24);
            if (hiByte != 0) return 24 + msbPos256[hiByte];
            hiByte = (byte) (value >> 16);
            return hiByte != 0 ? 16 + msbPos256[hiByte] : HighBitPosition((ushort) value);
        }

        /// <summary>
        ///     Returns the most significant set bit position of the specified value,
        ///     or -1 if no bits were set. The least significant bit position is 0.
        /// </summary>
        /// <remarks>Example: HighBitPosition(10) returns 3, i.e. high bit of 00001010 is position 3.</remarks>
        /// <param name="value">The value whose most significant bit position is desired.</param>
        /// <returns>The value parameter's most significant bit position.</returns>
        public static int HighBitPosition(this int value)
        {
            return HighBitPosition((uint) value);
        }

        /// <summary>
        ///     Returns the most significant set bit position of the specified value,
        ///     or -1 if no bits were set. The least significant bit position is 0.
        /// </summary>
        /// <remarks>Example: HighBitPosition(10) returns 3, i.e. high bit of 00001010 is position 3.</remarks>
        /// <param name="value">The value whose most significant bit position is desired.</param>
        /// <returns>The value parameter's most significant bit position.</returns>
        public static int HighBitPosition(this ulong value)
        {
            var high = (uint) (value >> 32);
            return high != 0 ? 32 + HighBitPosition(high) : HighBitPosition((uint) value);
        }

        /// <summary>
        ///     Returns the most significant set bit position of the specified value,
        ///     or -1 if no bits were set. The least significant bit position is 0.
        /// </summary>
        /// <remarks>Example: HighBitPosition(10) returns 3, i.e. high bit of 00001010 is position 3.</remarks>
        /// <param name="value">The value whose most significant bit position is desired.</param>
        /// <returns>The value parameter's most significant bit position.</returns>
        public static int HighBitPosition(this long value)
        {
            return HighBitPosition((ulong) value);
        }

        /// <summary>
        ///     Returns the most significant set bit position of the specified value,
        ///     or -1 if no bits were set. The least significant bit position is 0.
        /// </summary>
        /// <remarks>Example: HighBitPosition(10) returns 3, i.e. high bit of 00001010 is position 3.</remarks>
        /// <param name="value">The value whose most significant bit position is desired.</param>
        /// <returns>The value parameter's most significant bit position.</returns>
        public static int HighBitPosition(this UInt128 value)
        {
            var hiByte = (byte) (value.High >> 56);
            if (hiByte != 0) return 128 - 8 + msbPos256[hiByte];
            hiByte = (byte) (value.High >> 16);
            if (hiByte != 0) return 128 - 16 + msbPos256[hiByte];
            var high = (uint) (value.High >> 32);
            return value.High != 0 ? 64 + HighBitPosition(high) : HighBitPosition(value.Low);
        }

        /// <summary>Returns the count of trailing zero bits in the specified value.</summary>
        /// <remarks>Example: TrailingZeroBits(10) returns 1, i.e. 00001010 has 1 trailing 0 bit.</remarks>
        /// <param name="value">The value whose trailing zero bit count is desired.</param>
        /// <returns>The count of the value parameter's trailing zero bits.</returns>
        public static int TrailingZeroBits(this byte value)
        {
            return value != 0 ? lsbPos256[value] : 8;
        }

        /// <summary>Returns the count of trailing zero bits in the specified value.</summary>
        /// <remarks>Example: TrailingZeroBits(10) returns 1, i.e. 00001010 has 1 trailing 0 bit.</remarks>
        /// <param name="value">The value whose trailing zero bit count is desired.</param>
        /// <returns>The count of the value parameter's trailing zero bits.</returns>
        public static int TrailingZeroBits(this sbyte value)
        {
            return TrailingZeroBits((byte) value);
        }

        /// <summary>Returns the count of trailing zero bits in the specified value.</summary>
        /// <remarks>Example: TrailingZeroBits(10) returns 1, i.e. 00001010 has 1 trailing 0 bit.</remarks>
        /// <param name="value">The value whose trailing zero bit count is desired.</param>
        /// <returns>The count of the value parameter's trailing zero bits.</returns>
        public static int TrailingZeroBits(this ushort value)
        {
            var low = (byte) value;
            return low != 0 ? lsbPos256[low] : 8 + TrailingZeroBits((byte) (value >> 8));
        }

        /// <summary>Returns the count of trailing zero bits in the specified value.</summary>
        /// <remarks>Example: TrailingZeroBits(10) returns 1, i.e. 00001010 has 1 trailing 0 bit.</remarks>
        /// <param name="value">The value whose trailing zero bit count is desired.</param>
        /// <returns>The count of the value parameter's trailing zero bits.</returns>
        public static int TrailingZeroBits(this short value)
        {
            return TrailingZeroBits((ushort) value);
        }

        /// <summary>Returns the count of trailing zero bits in the specified value.</summary>
        /// <remarks>Example: TrailingZeroBits(10) returns 1, i.e. 00001010 has 1 trailing 0 bit.</remarks>
        /// <param name="value">The value whose trailing zero bit count is desired.</param>
        /// <returns>The count of the value parameter's trailing zero bits.</returns>
        public static int TrailingZeroBits(this uint value)
        {
            var lowByte = (byte) value;
            if (lowByte != 0) return lsbPos256[lowByte];
            return value != 0 ? DeBruijnMSBSet[unchecked((value & (1u + ~value)) * 0x077cb531u) >> 27] : 32;
        }

        /// <summary>Returns the count of trailing zero bits in the specified value.</summary>
        /// <remarks>Example: TrailingZeroBits(10) returns 1, i.e. 00001010 has 1 trailing 0 bit.</remarks>
        /// <param name="value">The value whose trailing zero bit count is desired.</param>
        /// <returns>The count of the value parameter's trailing zero bits.</returns>
        public static int TrailingZeroBits(this int value)
        {
            return TrailingZeroBits((uint) value);
        }

        /// <summary>Returns the count of trailing zero bits in the specified value.</summary>
        /// <remarks>Example: TrailingZeroBits(10) returns 1, i.e. 00001010 has 1 trailing 0 bit.</remarks>
        /// <param name="value">The value whose trailing zero bit count is desired.</param>
        /// <returns>The count of the value parameter's trailing zero bits.</returns>
        public static int TrailingZeroBits(this ulong value)
        {
            var lowByte = (byte) value;
            if (lowByte != 0) return lsbPos256[lowByte];
            var low = (uint) value;
            if (low != 0) return DeBruijnMSBSet[unchecked((low & (1u + ~low)) * 0x077cb531u) >> 27];
            return 32 + TrailingZeroBits((uint) (value >> 32));
        }

        /// <summary>Returns the count of trailing zero bits in the specified value.</summary>
        /// <remarks>Example: TrailingZeroBits(10) returns 1, i.e. 00001010 has 1 trailing 0 bit.</remarks>
        /// <param name="value">The value whose trailing zero bit count is desired.</param>
        /// <returns>The count of the value parameter's trailing zero bits.</returns>
        public static int TrailingZeroBits(this long value)
        {
            return TrailingZeroBits((ulong) value);
        }

        /// <summary>Returns the count of trailing zero bits in the specified value.</summary>
        /// <remarks>Example: TrailingZeroBits(10) returns 1, i.e. 00001010 has 1 trailing 0 bit.</remarks>
        /// <param name="value">The value whose trailing zero bit count is desired.</param>
        /// <returns>The count of the value parameter's trailing zero bits.</returns>
        public static int TrailingZeroBits(this UInt128 value)
        {
            if (value.Low != 0) return TrailingZeroBits(value.Low);
            return 64 + TrailingZeroBits(value.High);
        }

        /// <summary>Returns the count of leading zero bits in the specified value.</summary>
        /// <remarks>Example: LeadingZeroBits(10) returns 4, i.e. 00001010 has 4 leading 0 bits.</remarks>
        /// <param name="value">The value whose leading zero bit count is desired.</param>
        /// <returns>The count of the value parameter's leading zero bits.</returns>
        public static int LeadingZeroBits(this byte value)
        {
            // note that (byte)(7 - 255) = 8, so no need to test for value == 0
            return (byte) unchecked(7 - msbPos256[value]);
        }

        /// <summary>Returns the count of leading zero bits in the specified value.</summary>
        /// <remarks>Example: LeadingZeroBits(10) returns 4, i.e. 00001010 has 4 leading 0 bits.</remarks>
        /// <param name="value">The value whose leading zero bit count is desired.</param>
        /// <returns>The count of the value parameter's leading zero bits.</returns>
        public static int LeadingZeroBits(this sbyte value)
        {
            return LeadingZeroBits((byte) value);
        }

        /// <summary>Returns the count of leading zero bits in the specified value.</summary>
        /// <remarks>Example: LeadingZeroBits(10) returns 4, i.e. 00001010 has 4 leading 0 bits.</remarks>
        /// <param name="value">The value whose leading zero bit count is desired.</param>
        /// <returns>The count of the value parameter's leading zero bits.</returns>
        public static int LeadingZeroBits(this ushort value)
        {
            return unchecked(15 - HighBitPosition(value));
        }

        /// <summary>Returns the count of leading zero bits in the specified value.</summary>
        /// <remarks>Example: LeadingZeroBits(10) returns 4, i.e. 00001010 has 4 leading 0 bits.</remarks>
        /// <param name="value">The value whose leading zero bit count is desired.</param>
        /// <returns>The count of the value parameter's leading zero bits.</returns>
        public static int LeadingZeroBits(this short value)
        {
            return LeadingZeroBits((ushort) value);
        }

        /// <summary>Returns the count of leading zero bits in the specified value.</summary>
        /// <remarks>Example: LeadingZeroBits(10) returns 4, i.e. 00001010 has 4 leading 0 bits.</remarks>
        /// <param name="value">The value whose leading zero bit count is desired.</param>
        /// <returns>The count of the value parameter's leading zero bits.</returns>
        public static int LeadingZeroBits(this uint value)
        {
            return unchecked(31 - HighBitPosition(value));
        }

        /// <summary>Returns the count of leading zero bits in the specified value.</summary>
        /// <remarks>Example: LeadingZeroBits(10) returns 4, i.e. 00001010 has 4 leading 0 bits.</remarks>
        /// <param name="value">The value whose leading zero bit count is desired.</param>
        /// <returns>The count of the value parameter's leading zero bits.</returns>
        public static int LeadingZeroBits(this int value)
        {
            return LeadingZeroBits((uint) value);
        }

        /// <summary>Returns the count of leading zero bits in the specified value.</summary>
        /// <remarks>Example: LeadingZeroBits(10) returns 4, i.e. 00001010 has 4 leading 0 bits.</remarks>
        /// <param name="value">The value whose leading zero bit count is desired.</param>
        /// <returns>The count of the value parameter's leading zero bits.</returns>
        public static int LeadingZeroBits(this ulong value)
        {
            return unchecked(63 - HighBitPosition(value));
        }

        /// <summary>Returns the count of leading zero bits in the specified value.</summary>
        /// <remarks>Example: LeadingZeroBits(10) returns 4, i.e. 00001010 has 4 leading 0 bits.</remarks>
        /// <param name="value">The value whose leading zero bit count is desired.</param>
        /// <returns>The count of the value parameter's leading zero bits.</returns>
        public static int LeadingZeroBits(this long value)
        {
            return LeadingZeroBits((ulong) value);
        }

        /// <summary>Returns the count of leading zero bits in the specified value.</summary>
        /// <remarks>Example: LeadingZeroBits(10) returns 4, i.e. 00001010 has 4 leading 0 bits.</remarks>
        /// <param name="value">The value whose leading zero bit count is desired.</param>
        /// <returns>The count of the value parameter's leading zero bits.</returns>
        public static int LeadingZeroBits(this UInt128 value)
        {
            return 127 - HighBitPosition(value);
        }

        /// <summary>Returns the count of bits up to and including the most significant bit for the specified value.</summary>
        /// <remarks>Example: SignificantBits(6) returns 3, i.e. 00000110 has 3 significant bits.</remarks>
        /// <param name="value">The value whose significant bit count is desired.</param>
        /// <returns>The count of the value parameter's significant bits.</returns>
        public static int SignificantBits(this byte value)
        {
            return (sbyte) msbPos256[value] + 1;
        }

        /// <summary>Returns the count of bits up to and including the most significant bit for the specified value.</summary>
        /// <remarks>Example: SignificantBits(6) returns 3, i.e. 00000110 has 3 significant bits.</remarks>
        /// <param name="value">The value whose significant bit count is desired.</param>
        /// <returns>The count of the value parameter's significant bits.</returns>
        public static int SignificantBits(this sbyte value)
        {
            return (sbyte) msbPos256[(byte) value] + 1; // the cast to byte is not redundant (avoids sign bit extension)
        }

        /// <summary>Returns the count of bits up to and including the most significant bit for the specified value.</summary>
        /// <remarks>Example: SignificantBits(6) returns 3, i.e. 00000110 has 3 significant bits.</remarks>
        /// <param name="value">The value whose significant bit count is desired.</param>
        /// <returns>The count of the value parameter's significant bits.</returns>
        public static int SignificantBits(this ushort value)
        {
            return HighBitPosition(value) + 1;
        }

        /// <summary>Returns the count of bits up to and including the most significant bit for the specified value.</summary>
        /// <remarks>Example: SignificantBits(6) returns 3, i.e. 00000110 has 3 significant bits.</remarks>
        /// <param name="value">The value whose significant bit count is desired.</param>
        /// <returns>The count of the value parameter's significant bits.</returns>
        public static int SignificantBits(this short value)
        {
            return SignificantBits((ushort) value);
        }

        /// <summary>Returns the count of bits up to and including the most significant bit for the specified value.</summary>
        /// <remarks>Example: SignificantBits(6) returns 3, i.e. 00000110 has 3 significant bits.</remarks>
        /// <param name="value">The value whose significant bit count is desired.</param>
        /// <returns>The count of the value parameter's significant bits.</returns>
        public static int SignificantBits(this uint value)
        {
            return HighBitPosition(value) + 1;
        }

        /// <summary>Returns the count of bits up to and including the most significant bit for the specified value.</summary>
        /// <remarks>Example: SignificantBits(6) returns 3, i.e. 00000110 has 3 significant bits.</remarks>
        /// <param name="value">The value whose significant bit count is desired.</param>
        /// <returns>The count of the value parameter's significant bits.</returns>
        public static int SignificantBits(this int value)
        {
            return SignificantBits((uint) value);
        }

        /// <summary>Returns the count of bits up to and including the most significant bit for the specified value.</summary>
        /// <remarks>Example: SignificantBits(6) returns 3, i.e. 00000110 has 3 significant bits.</remarks>
        /// <param name="value">The value whose significant bit count is desired.</param>
        /// <returns>The count of the value parameter's significant bits.</returns>
        public static int SignificantBits(this ulong value)
        {
            return HighBitPosition(value) + 1;
        }

        /// <summary>Returns the count of bits up to and including the most significant bit for the specified value.</summary>
        /// <remarks>Example: SignificantBits(6) returns 3, i.e. 00000110 has 3 significant bits.</remarks>
        /// <param name="value">The value whose significant bit count is desired.</param>
        /// <returns>The count of the value parameter's significant bits.</returns>
        public static int SignificantBits(this long value)
        {
            return SignificantBits((ulong) value);
        }

        /// <summary>Returns the count of bits up to and including the most significant bit for the specified value.</summary>
        /// <remarks>Example: SignificantBits(6) returns 3, i.e. 00000110 has 3 significant bits.</remarks>
        /// <param name="value">The value whose significant bit count is desired.</param>
        /// <returns>The count of the value parameter's significant bits.</returns>
        public static int SignificantBits(this UInt128 value)
        {
            return HighBitPosition(value) + 1;
        }

        /// <summary>Returns the count of set bits in the specified value.</summary>
        /// <param name="value">The value whose bit count is desired.</param>
        /// <returns>The count of set bits in the specified value.</returns>
        public static int BitCount(this byte value)
        {
            uint v = value;
            v = v - ((v >> 1) & 0x55u);
            v = (v & 0x33u) + ((v >> 2) & 0x33u);
            return (int) ((v + (v >> 4)) & 0x0Fu);
        }

        /// <summary>Returns the count of set bits in the specified value.</summary>
        /// <param name="value">The value whose bit count is desired.</param>
        /// <returns>The count of set bits in the specified value.</returns>
        public static int BitCount(this sbyte value)
        {
            return BitCount((byte) value);
        }

        /// <summary>Returns the count of set bits in the specified value.</summary>
        /// <param name="value">The value whose bit count is desired.</param>
        /// <returns>The count of set bits in the specified value.</returns>
        public static int BitCount(this ushort value)
        {
            return BitCount((uint) value);
        }

        /// <summary>Returns the count of set bits in the specified value.</summary>
        /// <param name="value">The value whose bit count is desired.</param>
        /// <returns>The count of set bits in the specified value.</returns>
        public static int BitCount(this short value)
        {
            return BitCount((ushort) value);
        }

        /// <summary>Returns the count of set bits in the specified value.</summary>
        /// <param name="value">The value whose bit count is desired.</param>
        /// <returns>The count of set bits in the specified value.</returns>
        public static int BitCount(this uint value)
        {
            value = value - ((value >> 1) & 0x55555555u);
            value = (value & 0x33333333u) + ((value >> 2) & 0x33333333u);
            return (int) ((((value + (value >> 4)) & 0xF0F0F0Fu) * 0x1010101u) >> (32 - 8));
        }

        /// <summary>Returns the count of set bits in the specified value.</summary>
        /// <param name="value">The value whose bit count is desired.</param>
        /// <returns>The count of set bits in the specified value.</returns>
        public static int BitCount(this int value)
        {
            return BitCount((uint) value);
        }

        /// <summary>Returns the count of set bits in the specified value.</summary>
        /// <param name="value">The value whose bit count is desired.</param>
        /// <returns>The count of set bits in the specified value.</returns>
        public static int BitCount(this ulong value)
        {
            value = value - ((value >> 1) & 0x5555555555555555UL);
            value = (value & 0x3333333333333333UL) + ((value >> 2) & 0x3333333333333333UL);
            return (int) ((((value + (value >> 4)) & 0x0F0F0F0F0F0F0F0FUL) * 0x0101010101010101UL) >> (64 - 8));
        }

        /// <summary>Returns the count of set bits in the specified value.</summary>
        /// <param name="value">The value whose bit count is desired.</param>
        /// <returns>The count of set bits in the specified value.</returns>
        public static int BitCount(this long value)
        {
            return BitCount((ulong) value);
        }

        /// <summary>Returns the count of set bits in the specified value.</summary>
        /// <param name="value">The value whose bit count is desired.</param>
        /// <returns>The count of set bits in the specified value.</returns>
        public static int BitCount(this UInt128 value)
        {
            return BitCount(value.Low) + BitCount(value.High);
        }

        /// <summary>
        ///     Returns the specified value with all bits reversed
        ///     (i.e. 01001101 is returned as 10110010).
        /// </summary>
        /// <param name="value">The value to be reversed.</param>
        /// <returns>The reversed bits of the specified value.</returns>
        public static byte ReverseBits(this byte value)
        {
            var v = (uint) value;
            return (byte) (((((v * 0x0802u) & 0x22110u) | ((v * 0x8020u) & 0x88440u)) * 0x10101u) >> 16);
        }

        /// <summary>
        ///     Returns the specified value with all bits reversed
        ///     (i.e. 01001101 is returned as 10110010).
        /// </summary>
        /// <param name="value">The value to be reversed.</param>
        /// <returns>The reversed bits of the specified value.</returns>
        public static sbyte ReverseBits(this sbyte value)
        {
            return (sbyte) ReverseBits((byte) value);
        }

        /// <summary>
        ///     Returns the specified value with all bits reversed
        ///     (i.e. 01001101 is returned as 10110010).
        /// </summary>
        /// <param name="value">The value to be reversed.</param>
        /// <returns>The reversed bits of the specified value.</returns>
        public static ushort ReverseBits(this ushort value)
        {
            uint v = value;
            v = ((v >> 1) & 0x5555u) | ((v & 0x5555u) << 1);
            v = ((v >> 2) & 0x3333u) | ((v & 0x3333u) << 2);
            v = ((v >> 4) & 0x0F0Fu) | ((v & 0x0F0Fu) << 4);
            return (ushort) (((v >> 8) & 0x00FF) | ((v & 0x00FF) << 8));
        }

        /// <summary>
        ///     Returns the specified value with all bits reversed
        ///     (i.e. 01001101 is returned as 10110010).
        /// </summary>
        /// <param name="value">The value to be reversed.</param>
        /// <returns>The reversed bits of the specified value.</returns>
        public static short ReverseBits(this short value)
        {
            return (short) ReverseBits((ushort) value);
        }

        /// <summary>
        ///     Returns the specified value with all bits reversed
        ///     (i.e. 01001101 is returned as 10110010).
        /// </summary>
        /// <param name="value">The value to be reversed.</param>
        /// <returns>The reversed bits of the specified value.</returns>
        public static uint ReverseBits(this uint value)
        {
            value = ((value >> 1) & 0x55555555u) | ((value & 0x55555555u) << 1);
            value = ((value >> 2) & 0x33333333u) | ((value & 0x33333333u) << 2);
            value = ((value >> 4) & 0x0F0F0F0Fu) | ((value & 0x0F0F0F0Fu) << 4);
            value = ((value >> 8) & 0x00FF00FFu) | ((value & 0x00FF00FFu) << 8);
            return (value >> 16) | (value << 16);
        }

        /// <summary>
        ///     Returns the specified value with all bits reversed
        ///     (i.e. 01001101 is returned as 10110010).
        /// </summary>
        /// <param name="value">The value to be reversed.</param>
        /// <returns>The reversed bits of the specified value.</returns>
        public static int ReverseBits(this int value)
        {
            return (int) ReverseBits((uint) value);
        }

        /// <summary>
        ///     Returns the specified value with all bits reversed
        ///     (i.e. 01001101 is returned as 10110010).
        /// </summary>
        /// <param name="value">The value to be reversed.</param>
        /// <returns>The reversed bits of the specified value.</returns>
        public static ulong ReverseBits(this ulong value)
        {
            value = ((value >> 1) & 0x5555555555555555UL) | ((value & 0x5555555555555555UL) << 1);
            value = ((value >> 2) & 0x3333333333333333UL) | ((value & 0x3333333333333333UL) << 2);
            value = ((value >> 4) & 0x0F0F0F0F0F0F0F0FUL) | ((value & 0x0F0F0F0F0F0F0F0FUL) << 4);
            value = ((value >> 8) & 0x00FF00FF00FF00FFUL) | ((value & 0x00FF00FF00FF00FFUL) << 8);
            value = ((value >> 16) & 0x0000FFFF0000FFFFUL) | ((value & 0x0000FFFF0000FFFFUL) << 16);
            return (value >> 32) | (value << 32);
        }

        /// <summary>
        ///     Returns the specified value with all bits reversed
        ///     (i.e. 01001101 is returned as 10110010).
        /// </summary>
        /// <param name="value">The value to be reversed.</param>
        /// <returns>The reversed bits of the specified value.</returns>
        public static long ReverseBits(this long value)
        {
            return (long) ReverseBits((ulong) value);
        }

        /// <summary>
        ///     Returns the specified value with all bits reversed
        ///     (i.e. 01001101 is returned as 10110010).
        /// </summary>
        /// <param name="value">The value to be reversed.</param>
        /// <returns>The reversed bits of the specified value.</returns>
        public static UInt128 ReverseBits(this UInt128 value)
        {
            return new UInt128(ReverseBits(value.Low), ReverseBits(value.High));
        }
    }
}
/*
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/